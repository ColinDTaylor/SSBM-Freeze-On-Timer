#notes

0x80432A28 = frame advance on/off

0x804C1FAC - Controller data
0x804C1FB0 - Prev. frame controller data
      - Each controller is offset by 0x44
      - Bit Flags:  xxxx xxxx UDLR UDLR xxxS YXBA xLRZ UDRL

0x801a500c does not run when the game is frozen

800192c4 - current injection point

0x804C1fac P1 digital button data

Backup of registers, 5/12:
  r   start        end
  --- -----       -----
  r0:   800195e8  	r0:
  r1:   804eeac0  	r1:
  r2:   804df9e0  	r2:
  r3:   8001955c  	r3:
  r4:   803c0000  	r4:
  r5:   0000b932  	r5:
  r6:   80000000  	r6:
  PC:   800192c4  	PC:
  LR:   800195e8  	LR:
  CTR:  00000000  	CTR:
  CR:   20900088  	CR:
  FSPCR:00000000  	FSPCR:
  MSR:  0000b932  	MSR:
  SRR0: 800196a4  	SRR0:
  SRR1: 00003932  	SRR1:

digital buttons pre-freeze are saved, what!

0x80376bb8 Dan says this is a good function to use for input polling:

"[11:34 AM] dansalvato: It's the lowest-level input data that comes right after the hardware is polled."

This should help with the issues that occur when I can't grab inputs while in frame advance mode

This line of code seems to run once each frame.
The code itself is stw	r4, 0 (r3)
r3 in this case is a memory address: 0x8046b108

I have no idea what that address is doing, it updates when I give inputs, but only when I'm actually able to give input??

bitmap of lowlevelinputfunction:
  p1:
     A: 01000000
     B: 02000000
     X: 04000000
     Y: 08000000
     S: 10000000
     L: 00400000
     R: 00200000
     Z: 00100000
    Au: 0000007f
    Ad: 00000081
    Al: 00008100
    Ar: 00007f00
   *Cu: 00000000
   *Cd: 00000000
   *Cl: 00000000
   *Cr: 00000000
    Du: 00080000
    Dd: 00040000
    Dl: 00010000
    Dr: 00020000

  So this is a bitmap that looks like this:
    xxxS YXBA xLRZ dpad [LR    Analog   UD]
   -0000 0000 0000 0000 0000 0000 0000 0000-

   This is extremely similar to the bitmap for the other input memory addr.

   *c inputs are on next word, they're at the start and are equal to analog

801a4510 0 ac_DevelopMode_FrameAdvanceCheck

Maybe I should see what frameadvancecheck is doing

a breakdown of frameadvancecheck:
   801a4510 -start
   801a4620 -end

  0x110 lines long (176)

8 BIT MEMORY ADDRESSES THAT SEEM TO UPDATE WITH P1 Z PRESS (15 of them)
  0x80:           NOTES
    46B109  |   This is the one from ds_lowlevelinputpoll
    46B139  |     0x30 from ds_lowlevelinputpoll
    46B169  |     0x60
    46B199  |     0x90
    46B1C9  |     0xC0
    479C37  |
    479CF7  |
    4C1FAF  |
    4C1FB3  |
    4C20BF  |
    4C20C3  |
    4C21CF  |
    4C21D3  |
    C6BFBF  |
    C6BFC3  |

  Now I'll test with frameadvance on 80000000

  ...nothing at all

Oh wait, I should just hook 80376bb8 (ds_lowlevelinputfunction) into my function, I wonder what the in/out are

Achilles notes on drawing rectangles:


  I don't really have good notes about it, but it's not a draw rectangle function. It is text with a background color. If you make the text invisible with an opaque bg color, then it just looks like a rectangle. This is what Dan did for the input display with TE. The text structs are the same ones used for Develop Mode (like when you press Y+D-Pad Down to display the action state names --> this structure just has a transparent bg color).

  These were the functions I labeled.

  80302834 00000180 80302834 0 ___ac_Text_CreateDataTable
  80302a3c 0000004c 80302a3c 0 ___ac_DevelopMode_Text_ResetCursorX&Y
  80302a88 00000028 80302a88 0 ___ac_DevelopMode_Text_ResetCursorX
  80302bb0 00000034 80302bb0 0 ___ac_DevelopMode_Text_Erase
  80302d4c 000000a4 80302d4c 0 ___ac_DevelopMode_Text_Display



  Text Data Struct
  ------------
  0x00   short   x offset (0=screenleft)
  0x02   short   y offset (0=screentop)
  0x04   byte    max character width of menu
  0x05   byte    max rows (?)
  0x06   byte    current character count cursor point (left to right)
  0x07   byte    current row cursor point (top to bottom)
  0x08   float   width of menu (stretch)
  0x0C   float   height of menu (stretch)
  0x10   word    background color (box behind letters)
  0x14   word    text color
  0x24   short   text boldness (two bytes that make this short must be same)
  0x26   byte     (00000000) = show text and background
        (00000040) = hide background
        (00000080) = hide text
  0x27   byte    text color hue change? 0x00 to 0x03
  0x28   point   location of ASCII to display on screen
  0x2C   point   previous text structure
  0x30   point   next text structure

  *****************
  * 20XX TE Notes *
  *****************
  - these were from a day or two after the initial TE release...

  version 1a

  Input Display
  Flag @ 80469db8

  If ON, writes 803fd000 to 804d6e18
  Text data structs ["rectangle" data] is at 803fd000 to 803fd8f0

  I believe 804d6e18 is a pointer to the first texture data struct. Dan overwrites this pointer to point to his own list.

  Not sure if any of this has changed position since version 1a (initial release)....

  If you turn Develop Mode on, I believe 0x804a200c = Y+D-Pad Down action states text data struct.

  So turn that feature on and then go to that struct and start modifying things to get a sense for how the text struct data works.

Achilles advice on frame advance:
  Try this:
  @ 80479d68

  Freeze: set to 0x01010001
  Frame Advance: set to 0x01010100
  Unfreeze: set to 0x00000001

  Should be just like Develop Mode.

setting the address to 0x00000000 while in frame advance does nothing

Achilles unfreeze method seems to work fine.

-------------------
-Fixed a bug with the compare on the fa address in _if_frozen

now it's back to freezing out the gate, which is problem an issue with my injection site running more than once each frame

This should be less of an issue now that my frame advance method is more sound though, I just need to find a method that runs exactly once each frame. Easy.

whoa, setting to 01010001 will disable inputs but not freeze things

801a500c [lwz	r0, 0x000C (r25)] only seems to run once a frame

When setting the address to 0x01010100, the next frame will
render normally, and then the game will freeze on the frame
following that one.

OH WOW 0x80479d68 is the byte that controls pauses

that's why this is getting so messy! I'm reading a pause state
as the exact same as being in frame advance and so am messing
everything up!

well, now the game won't ever need my _pause_status code in
the way it's currently designed, I need to change it to skip the
majority of the code if the word contained there is 0x02000000
(normal pause)





CHECKS TO PASS moment of truth

  Required before first play-test ✓
    ✓- doesn't freeze in menus
    ✓- doesn't freeze in a non-frame advance way
    ✓- custom in game timer is counting up
    ✓- custom timer stops at multiple of allotted time
    ✓- both players can unfreeze game with start
    ✓- both players can frame advance with Z
    ✓- both players inputs are read during frame advance
    ✓- timer stops counting when a player has paused
    ✓- pause works normally when not frozen
    ✕- p2-4 unfreeze doesn't cause odd half-pause
    ✕- code works as a DOL mod

  Optional stuff ✕
    ✕- start does not pause immediately on resuming the game
    ✓- code toggles on an in-game input(R+A+dL)
    ✓- timer resets on toggle off
    ✕- code gives a signal when toggled on or off
    ✕- make time between pauses semi-random
    ✕- insert more comments, restore lost ones, fix old ones
    ✕- optimize code, mostly for lower line count
    ✕- code plays nice with other gecko codes

  Magic Christmas Dreamland ✕✕✕✕✕✕✕✕✕✕✕✕
    ✕- d pad pans camera in frame advance
    ✕- display each frame's inputs during freeze
    ✕- make time between pauses modifiable

  Next steps
    ✕- Change timer interval to ~a minute
    ✕- Get it working on console
    ✕- Playtest without crashes or other issues



-----------------------------------------------------
IT WORKS - time to work on the little additional stuff

at a 3600 frame interval, the game freezes for the first
time at MM:02:07, where MM = the starting minutes - 1

next freeze happens at 02:09

next at 02:11

seems like it's actually using the interval set -1 frames!

xxxx xxxx UDLR UDLR xxxS YXBA xLRZ UDLR
0000 0000 0000 0000 0000 0000 0000 0000

so the value for R + A + dpad-L is:
   A   R     dL
0001 0010 0001

or 100100001 in binary, 289 in dec, 0x121 in hex

CHANGES:
  -_unset_freeze now goes to _restore instead of _toggle, this should help fix some of the issues with the timer being off by 1 frame
  -_unset_freeze now sets each player's prev. frame inputs to include start, so that the game won't register a pause after unfreezing.


801a500c - current injection point

when calling an outer function, I need to move the address of that function to the control register and then branch there (bctrl)


NICE, if I write 0x02020001 to the pause address during _unset_freeze (instead of 0x00000001), it turns frame advance mode
off and activates normal pause, but then reads the start input later in that frame and writes 0x0000 over the 0x0202, essentially
negating the start input. This fixes the issues where it would pause immediately after unfreezing.


Now to DOL mod (gecko seems to be broken on console with USB loading)

0x8032dcb0	0x8032ddbc	size:10C	Unused code function (nop 801a4f84 and 801a5070)

fist nop offset should be       1A7F84 second:  1A2070
NOPE WRONG

first nop is at 1a1b64, second at 1a1c50

got it at least

32a890: DOL offset I need to clear out

32a898: DOL offset my code starts at

1A1BEC: DOL offset of my injection point, machine code @ injection = 80 19 00 0C

entering my code: branching from 801a500c to 803fa3e8, offset of: 0x2553DC                machine language: 482553DC
leaving my code:  branching from 803fa64c to 801a5010, offset of: -0x188F0C, or: 0xFFE770F4 machine language: 4BDB49C4

branching backwards
b 0x (FFFF FFFF - (start memory address - end memory address) )+1

branching forward
b 0x end address - start address

wtf how did the DOL get bigger?

last offset in DOL right now (real one): 004385FC


...shit, I actually needed 0x270 of space for this :(

3f73e8 overwritten with 0s (the debug mode stuff)

doing tht broke everything wow

803fa3e8 debug menu tables/strings

003f73e8 definitely seems to be where I'm supposed to start. What the heck

machine code to write in:
    3821FFD8 90010004
    90610008 9081000C
    90A10010 90C10014
    93E10018 7C6902A6
    9061001C 7C6802A6
    90610020 60000000
    3C608045 60633080
    38800004 7C8903A6
    80830000 2C040002
    4182001C 60000000
    38630E90 4200FFEC
    60000000 480001D8
    60000000 3C608047
    60639D68 88830000
    2C040002 418201C0
    60000000 3C608047
    60639D68 80830000
    2C040000 41820048
    60000000 38A01000
    480000F1 60000000
    2C050000 418100C8
    60000000 38A00010
    480000D9 60000000
    2C050000 41820178
    60000000 38840100
    90830000 48000168
    60000000 38A00121
    480000B1 60000000
    3C608000 60632D6C
    2C050001 40820028
    88830003 68840001
    98830003 3C808017
    60844338 7C8903A6
    4E800421 38800000
    B0030000 88830003
    2C040000 41820118
    60000000 A0830000
    38840001 B0830000
    38A00E10 7C642BD6
    7C6329D6 7C632051
    418100F4 60000000
    48000008 60000000
    3CA00101 38A50001
    3C608047 60639D68
    98A30000 480000D0
    60000000 3CA00202
    38A50001 3C608047
    60639D68 90A30000
    480000B4 60000000
    3821FFE4 90610004
    7C6902A6 90610014
    90810008 90C10010
    38600004 7C6903A6
    3C60804C 60631FAC
    38C00000 4800000C
    60000000 38630044
    80830004 7C842838
    7C042800 41820040
    60000000 80830000
    7C842838 7C042800
    4082000C 60000000
    38C00001 4200FFD0
    60000000 2C060000
    41820014 60000000
    38A00001 48000014
    60000000 38A00000
    48000008 60000000
    80610014 7C6903A6
    80610004 80810008
    80C10010 3821001C
    4E800020 80610020
    7C6803A6 8061001C
    7C6903A6 80010004
    80610008 8081000C
    80A10010 80C10014
    83E10018 38210028
    8019000C 60000000
    60000000 00000000


OH yeah! When the game is manually set to pause, not all
players may unpause it, only the player who paused most
recently (or if nobody has, p1), so when p2 tries to unpause
the game after hitting start, it doesn't sucessfully
undo the pause. p1 is fine but p2 needs to have been
the last person to pause in order to unpause

I need to find a better solution I guess. Somehow I need
the game to disallow pausing for a few frames after I
unfreeze. Is there a bit for that?

Or I could try Joseph's method of finding the bit for
disabling/enabling pause. This MIGHT be really easy,
worth trying to cheatsearch for it.

0x804A04F4 - This seems like it could be what I'm looking for
appears to be 1 when pause is on, 0 when pause is off
(single byte)

Hah, writing to it while on the menu screen even makes the
animation happen where it switches to pause being off/on

Oh wait shit it only does that when I have it highlighted

If I have a different option select highlighted, it just
alters that one :\ Guess I need more cheatsearch.

Got two more contenders: 0x80045B1A and 0x8112F364

an 81 address seems odd, I don't see those too often


test addr #1: 0x80045B1A: 0001909B
          #2: 0x8112F364: 01000000

The second one seems more like, the byte immediately after
seems to flip whenever I turn score display on/off

Oh wait no, one is just a mirror of the other one?

Byte  1: Pause on/off
      2: Score display on/off
      3: Self-Destructs 0/1/2 (corresponds to -1/0/-2)
      4: ?

changing the values in #1 seems to have no effect on #2,
and if you change it and then move the ticker in game,
#2 updates to the new in-game value and #1 stays at what
you flipped it to, not changing at all.

flipping just #2 causes it to flip back immediately,
and then plays the animation for the on/off switch happening
but it plays it switching back to the one you were already
on. Confusing.

Test: flip both and then frame advance.

If I flip #1 when I DON'T have the menu option highlighted,
it works exactly how I want it to (turns pause off)

time to test this in game.

the 81 address's value changed to 03000000 while in game

no idea what that means, but it's probably unreliable
The other address is modifiable, and will remain modified
after I change anything, but it seems to have no effect
on the actual game state.

Unsetting that 3 seems to have no effect on the state of the
game. oh well.

as long as I'm not on the menu where that pause option is,
it seems to stick when I turn it on or off. I'm still allowed
to pause the game though :\

Yup, looks like that's not going to help, seems like whether
pause is enabled or not is determined at the game's start

I could set a flag during unset freeze that would tell the
code upon running next frame that it needs to set the pause
byte to 00, then I could set pause to 0202 which would stop
any player's pause press from registering (since the game
has just been paused, according to it). Seems like an awkward
solution to the problem though.

0x8046DB80		Start of Current Match information

^ it could be in there somewhere.

0x8045BF10		Start of current multiplayer match settings
I need to look into the documentation on this that's written
in the DOL mod topic.

Nope this just pointed to what I already knew, I guess it's
worth checking the current match information one, but it
seems that changing whether pause is on or off during a match
won't actually affect whether or not players are currently
allowed to pause. I wonder what would? No matter what I would
need some kind of flag to be set that would allow me to turn
the setting off once I flipped it to stop the pause from
happening. Tomorrow I should try setting a flag and then the
pause bit to 02, then detecting the flag next frame and
unsetting it, while also unsetting the pause byte

That should allow the game to ignore the pause input,
although it may cause the unfreeze to happen 1 frame slower
than it should, which may feel clunky. We'll see, I need to
get some sleep.
